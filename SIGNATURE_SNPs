
library(adegenet)
library(caret)
library(pforeach)
library(kknn)

source("C:/Rlib/WC84.R")

setwd("C:/Users/mortenma/Google Drive/post doc/essential files/paper 1/test")

data=read.PLINK("SNP.QC.population.raw",parallel=FALSE)

# scandinavia only only
data2=data[-8:-15,]
pop=c(rep("south",7),rep("south",8),rep("south",10),rep("west",24),rep("south",8))
corkwing=cbind(as.data.frame(pop),as.data.frame(data2))
# keep pop info
pop=corkwing$pop
# create folds
folds <- cut(seq(1,nrow(corkwing)),breaks=5,labels=FALSE)
# create snp interval
interval=seq(0,100,1)[-1:-2]

result2=matrix(ncol=5,nrow=length(interval))

for (a in 1:10) {
	#Randomly shuffle  data
	corkwing<-corkwing[sample(nrow(corkwing)),]

	# create empty results object
	result.kknn=matrix(ncol=5,nrow=length(interval))

	result.fst=pforeach(i = 1:5,.export=ls(envir=globalenv()),.combine=cbind)({
			index <- which(folds==i,arr.ind=TRUE)
			test <- corkwing[index,]
		        train <- corkwing[-index,]
			# get SNP wise Fst for each fold	
			WC84(train[,-1],train$pop)$theta})
			
			# loop through fst matrix
			for (i in 1:5) {
			index <- which(folds==i,arr.ind=TRUE)
			test <- corkwing[index,]
		        train <- corkwing[-index,]
		        FST=sort(result.fst[,i],decreasing=T)
	
	    				## loop through the best snps for each fold
					for (j in 1:length(interval)){
				
					test.corkwing.fst=cbind(test[,1],test[,colnames(test)%in%names(FST[1:interval[j]])])
					colnames(test.corkwing.fst)[1]="pop"
		
					train.corkwing.fst=cbind(train[,1],train[,colnames(train)%in%names(FST[1:interval[j]])])
					colnames(train.corkwing.fst)[1]="pop"
					
		        		res.fst = kknn(pop~., train.corkwing.fst, test.corkwing.fst, distance = 1,kernel = "rectangular")
		        		fit.fst <- fitted(res.fst)   
		        		confusion.fst=table(test.corkwing.fst$pop, fit.fst)
		        		# calculate accuracy pr fold pr snps
		        		result.kknn[j,i]=sum(diag(confusion.fst))/length(index)
		        		} 
		        }
		        
	# paste results from  10 repetitions	        
	result2=cbind(result2,result.kknn)
}
# clean up 
final=result2[,-1:-5]

x=1:99
sds=apply(final,1,sd)
lower=rowMeans(final)-sds
upper=rowMeans(final)+sds
upper[upper>1]=1
plot.ts(rowMeans(final),ylim=c(0.8,1),ylab="Accuracy",xlab="# SNPs")
lines(x,lower,col="gray")
lines(x,upper,col="gray")
polygon(c(x,rev(x)),c(upper,rev(lower)),col="gray")
lines(rowMeans(final))

arrows(x, 2*lower, x,upper, length=0.05, angle=90, code=0)








